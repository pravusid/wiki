<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>TypeScript - Utility Types | TIL wiki</title>
    <meta name="generator" content="VuePress 1.8.2">
    
    <meta name="description" content="">
    
    <link rel="preload" href="/wiki/assets/css/0.styles.a415fee5.css" as="style"><link rel="preload" href="/wiki/assets/js/app.8c48789a.js" as="script"><link rel="preload" href="/wiki/assets/js/2.ffb6456b.js" as="script"><link rel="preload" href="/wiki/assets/js/230.b95ea744.js" as="script"><link rel="prefetch" href="/wiki/assets/js/10.fb9aa7f4.js"><link rel="prefetch" href="/wiki/assets/js/100.1f13a518.js"><link rel="prefetch" href="/wiki/assets/js/101.3e937700.js"><link rel="prefetch" href="/wiki/assets/js/102.7fbd779c.js"><link rel="prefetch" href="/wiki/assets/js/103.805326cb.js"><link rel="prefetch" href="/wiki/assets/js/104.cb8f66e4.js"><link rel="prefetch" href="/wiki/assets/js/105.45b688e5.js"><link rel="prefetch" href="/wiki/assets/js/106.9318dc62.js"><link rel="prefetch" href="/wiki/assets/js/107.b66d66e3.js"><link rel="prefetch" href="/wiki/assets/js/108.a4302136.js"><link rel="prefetch" href="/wiki/assets/js/109.0e017687.js"><link rel="prefetch" href="/wiki/assets/js/11.f89239dc.js"><link rel="prefetch" href="/wiki/assets/js/110.93af0f38.js"><link rel="prefetch" href="/wiki/assets/js/111.288ff8f1.js"><link rel="prefetch" href="/wiki/assets/js/112.c61aaeb8.js"><link rel="prefetch" href="/wiki/assets/js/113.c4317636.js"><link rel="prefetch" href="/wiki/assets/js/114.91278285.js"><link rel="prefetch" href="/wiki/assets/js/115.1ee01718.js"><link rel="prefetch" href="/wiki/assets/js/116.79dc3166.js"><link rel="prefetch" href="/wiki/assets/js/117.d1e77313.js"><link rel="prefetch" href="/wiki/assets/js/118.adc80fbb.js"><link rel="prefetch" href="/wiki/assets/js/119.bf5e8c7e.js"><link rel="prefetch" href="/wiki/assets/js/12.57d4c819.js"><link rel="prefetch" href="/wiki/assets/js/120.7637ee21.js"><link rel="prefetch" href="/wiki/assets/js/121.4ed5391b.js"><link rel="prefetch" href="/wiki/assets/js/122.9b5b7643.js"><link rel="prefetch" href="/wiki/assets/js/123.a85651aa.js"><link rel="prefetch" href="/wiki/assets/js/124.5d358ce7.js"><link rel="prefetch" href="/wiki/assets/js/125.30ad5e9d.js"><link rel="prefetch" href="/wiki/assets/js/126.83af0775.js"><link rel="prefetch" href="/wiki/assets/js/127.2493a8fb.js"><link rel="prefetch" href="/wiki/assets/js/128.68bebb68.js"><link rel="prefetch" href="/wiki/assets/js/129.9b37fc01.js"><link rel="prefetch" href="/wiki/assets/js/13.08bf9b68.js"><link rel="prefetch" href="/wiki/assets/js/130.6a5933c4.js"><link rel="prefetch" href="/wiki/assets/js/131.e216b0fe.js"><link rel="prefetch" href="/wiki/assets/js/132.9851b9e1.js"><link rel="prefetch" href="/wiki/assets/js/133.74ac188f.js"><link rel="prefetch" href="/wiki/assets/js/134.e96fa1ff.js"><link rel="prefetch" href="/wiki/assets/js/135.4c03f626.js"><link rel="prefetch" href="/wiki/assets/js/136.d212ae0f.js"><link rel="prefetch" href="/wiki/assets/js/137.88aa1581.js"><link rel="prefetch" href="/wiki/assets/js/138.359672ba.js"><link rel="prefetch" href="/wiki/assets/js/139.3f514240.js"><link rel="prefetch" href="/wiki/assets/js/14.b2fca22d.js"><link rel="prefetch" href="/wiki/assets/js/140.4a2bf562.js"><link rel="prefetch" href="/wiki/assets/js/141.d74067ab.js"><link rel="prefetch" href="/wiki/assets/js/142.1d7071e3.js"><link rel="prefetch" href="/wiki/assets/js/143.ebdbd8ca.js"><link rel="prefetch" href="/wiki/assets/js/144.977f3b03.js"><link rel="prefetch" href="/wiki/assets/js/145.1cfdea32.js"><link rel="prefetch" href="/wiki/assets/js/146.655cae1a.js"><link rel="prefetch" href="/wiki/assets/js/147.e0ef177c.js"><link rel="prefetch" href="/wiki/assets/js/148.bb6a213e.js"><link rel="prefetch" href="/wiki/assets/js/149.4449f62c.js"><link rel="prefetch" href="/wiki/assets/js/15.91a2d2f7.js"><link rel="prefetch" href="/wiki/assets/js/150.f2d69af2.js"><link rel="prefetch" href="/wiki/assets/js/151.9e667e30.js"><link rel="prefetch" href="/wiki/assets/js/152.aeb9ad11.js"><link rel="prefetch" href="/wiki/assets/js/153.fe60e9a5.js"><link rel="prefetch" href="/wiki/assets/js/154.ccc3cad9.js"><link rel="prefetch" href="/wiki/assets/js/155.de2c1972.js"><link rel="prefetch" href="/wiki/assets/js/156.029dda8c.js"><link rel="prefetch" href="/wiki/assets/js/157.f8f5e4eb.js"><link rel="prefetch" href="/wiki/assets/js/158.8251f8e0.js"><link rel="prefetch" href="/wiki/assets/js/159.7927613c.js"><link rel="prefetch" href="/wiki/assets/js/16.89cc238b.js"><link rel="prefetch" href="/wiki/assets/js/160.369d5823.js"><link rel="prefetch" href="/wiki/assets/js/161.1bca00cf.js"><link rel="prefetch" href="/wiki/assets/js/162.2a4edd74.js"><link rel="prefetch" href="/wiki/assets/js/163.a6ae60ce.js"><link rel="prefetch" href="/wiki/assets/js/164.7226811e.js"><link rel="prefetch" href="/wiki/assets/js/165.fd347176.js"><link rel="prefetch" href="/wiki/assets/js/166.f02dd23c.js"><link rel="prefetch" href="/wiki/assets/js/167.0eab8469.js"><link rel="prefetch" href="/wiki/assets/js/168.f7a88845.js"><link rel="prefetch" href="/wiki/assets/js/169.4f33facd.js"><link rel="prefetch" href="/wiki/assets/js/17.835e7e42.js"><link rel="prefetch" href="/wiki/assets/js/170.456e520a.js"><link rel="prefetch" href="/wiki/assets/js/171.021cc5b5.js"><link rel="prefetch" href="/wiki/assets/js/172.a1310e60.js"><link rel="prefetch" href="/wiki/assets/js/173.3273822a.js"><link rel="prefetch" href="/wiki/assets/js/174.cb2db7ba.js"><link rel="prefetch" href="/wiki/assets/js/175.12744d4f.js"><link rel="prefetch" href="/wiki/assets/js/176.37053217.js"><link rel="prefetch" href="/wiki/assets/js/177.c8eebb76.js"><link rel="prefetch" href="/wiki/assets/js/178.0d138015.js"><link rel="prefetch" href="/wiki/assets/js/179.17eeff65.js"><link rel="prefetch" href="/wiki/assets/js/18.ca3c3cac.js"><link rel="prefetch" href="/wiki/assets/js/180.1e2847dc.js"><link rel="prefetch" href="/wiki/assets/js/181.e7d33dba.js"><link rel="prefetch" href="/wiki/assets/js/182.8f40be4f.js"><link rel="prefetch" href="/wiki/assets/js/183.e9843600.js"><link rel="prefetch" href="/wiki/assets/js/184.64a6ce09.js"><link rel="prefetch" href="/wiki/assets/js/185.42feb6d1.js"><link rel="prefetch" href="/wiki/assets/js/186.2ec5709f.js"><link rel="prefetch" href="/wiki/assets/js/187.d6471bb1.js"><link rel="prefetch" href="/wiki/assets/js/188.041eb02d.js"><link rel="prefetch" href="/wiki/assets/js/189.7facbc70.js"><link rel="prefetch" href="/wiki/assets/js/19.35e088e8.js"><link rel="prefetch" href="/wiki/assets/js/190.b0ef8b83.js"><link rel="prefetch" href="/wiki/assets/js/191.f8c9965d.js"><link rel="prefetch" href="/wiki/assets/js/192.ee8d3d42.js"><link rel="prefetch" href="/wiki/assets/js/193.90b9e209.js"><link rel="prefetch" href="/wiki/assets/js/194.549453f2.js"><link rel="prefetch" href="/wiki/assets/js/195.cc5ffea1.js"><link rel="prefetch" href="/wiki/assets/js/196.ab22b6f7.js"><link rel="prefetch" href="/wiki/assets/js/197.529e255a.js"><link rel="prefetch" href="/wiki/assets/js/198.ae7cb1b3.js"><link rel="prefetch" href="/wiki/assets/js/199.fffbe11f.js"><link rel="prefetch" href="/wiki/assets/js/20.3bd9f9ca.js"><link rel="prefetch" href="/wiki/assets/js/200.572a5d3f.js"><link rel="prefetch" href="/wiki/assets/js/201.d4bda905.js"><link rel="prefetch" href="/wiki/assets/js/202.da1a8e6c.js"><link rel="prefetch" href="/wiki/assets/js/203.a03db0a8.js"><link rel="prefetch" href="/wiki/assets/js/204.49c58d8b.js"><link rel="prefetch" href="/wiki/assets/js/205.ded4147b.js"><link rel="prefetch" href="/wiki/assets/js/206.a7706688.js"><link rel="prefetch" href="/wiki/assets/js/207.fcc72451.js"><link rel="prefetch" href="/wiki/assets/js/208.862a0270.js"><link rel="prefetch" href="/wiki/assets/js/209.6d8d675e.js"><link rel="prefetch" href="/wiki/assets/js/21.388b03ee.js"><link rel="prefetch" href="/wiki/assets/js/210.7c6f0ffe.js"><link rel="prefetch" href="/wiki/assets/js/211.0202ce0b.js"><link rel="prefetch" href="/wiki/assets/js/212.9c613254.js"><link rel="prefetch" href="/wiki/assets/js/213.3aa3d535.js"><link rel="prefetch" href="/wiki/assets/js/214.826bb916.js"><link rel="prefetch" href="/wiki/assets/js/215.ebf216f5.js"><link rel="prefetch" href="/wiki/assets/js/216.30613c91.js"><link rel="prefetch" href="/wiki/assets/js/217.ca9eb299.js"><link rel="prefetch" href="/wiki/assets/js/218.5a064545.js"><link rel="prefetch" href="/wiki/assets/js/219.d47c83ee.js"><link rel="prefetch" href="/wiki/assets/js/22.eb52b61f.js"><link rel="prefetch" href="/wiki/assets/js/220.012c4ceb.js"><link rel="prefetch" href="/wiki/assets/js/221.41db95d4.js"><link rel="prefetch" href="/wiki/assets/js/222.e48c88cb.js"><link rel="prefetch" href="/wiki/assets/js/223.cd510965.js"><link rel="prefetch" href="/wiki/assets/js/224.dda3aa3d.js"><link rel="prefetch" href="/wiki/assets/js/225.41deac39.js"><link rel="prefetch" href="/wiki/assets/js/226.455b586e.js"><link rel="prefetch" href="/wiki/assets/js/227.6353969e.js"><link rel="prefetch" href="/wiki/assets/js/228.b674b679.js"><link rel="prefetch" href="/wiki/assets/js/229.75b11eeb.js"><link rel="prefetch" href="/wiki/assets/js/23.f5d40fbc.js"><link rel="prefetch" href="/wiki/assets/js/231.f8324684.js"><link rel="prefetch" href="/wiki/assets/js/232.8095751e.js"><link rel="prefetch" href="/wiki/assets/js/233.3572b576.js"><link rel="prefetch" href="/wiki/assets/js/234.52709ef8.js"><link rel="prefetch" href="/wiki/assets/js/235.80174c85.js"><link rel="prefetch" href="/wiki/assets/js/236.8157fd31.js"><link rel="prefetch" href="/wiki/assets/js/237.e057a43d.js"><link rel="prefetch" href="/wiki/assets/js/238.352493a9.js"><link rel="prefetch" href="/wiki/assets/js/239.db04b7e9.js"><link rel="prefetch" href="/wiki/assets/js/24.1c0acbb2.js"><link rel="prefetch" href="/wiki/assets/js/240.9c332c29.js"><link rel="prefetch" href="/wiki/assets/js/241.ba4573b0.js"><link rel="prefetch" href="/wiki/assets/js/242.6dfde502.js"><link rel="prefetch" href="/wiki/assets/js/243.81fd9f4d.js"><link rel="prefetch" href="/wiki/assets/js/244.1a762ad1.js"><link rel="prefetch" href="/wiki/assets/js/25.ec62a3a1.js"><link rel="prefetch" href="/wiki/assets/js/26.f27244c5.js"><link rel="prefetch" href="/wiki/assets/js/27.e10aaeb3.js"><link rel="prefetch" href="/wiki/assets/js/28.a02c9734.js"><link rel="prefetch" href="/wiki/assets/js/29.a03b9878.js"><link rel="prefetch" href="/wiki/assets/js/3.e666235f.js"><link rel="prefetch" href="/wiki/assets/js/30.61ea3e9c.js"><link rel="prefetch" href="/wiki/assets/js/31.a1f729c5.js"><link rel="prefetch" href="/wiki/assets/js/32.954bbcbe.js"><link rel="prefetch" href="/wiki/assets/js/33.026d6058.js"><link rel="prefetch" href="/wiki/assets/js/34.043c7c1a.js"><link rel="prefetch" href="/wiki/assets/js/35.ae751e6b.js"><link rel="prefetch" href="/wiki/assets/js/36.e3f40e3c.js"><link rel="prefetch" href="/wiki/assets/js/37.75958a80.js"><link rel="prefetch" href="/wiki/assets/js/38.13d8cdc8.js"><link rel="prefetch" href="/wiki/assets/js/39.4ba63c51.js"><link rel="prefetch" href="/wiki/assets/js/4.ba40c9c9.js"><link rel="prefetch" href="/wiki/assets/js/40.05a73e16.js"><link rel="prefetch" href="/wiki/assets/js/41.cc289f54.js"><link rel="prefetch" href="/wiki/assets/js/42.e88ed1fc.js"><link rel="prefetch" href="/wiki/assets/js/43.cb54b697.js"><link rel="prefetch" href="/wiki/assets/js/44.4e8599fe.js"><link rel="prefetch" href="/wiki/assets/js/45.7aea6739.js"><link rel="prefetch" href="/wiki/assets/js/46.87cb1015.js"><link rel="prefetch" href="/wiki/assets/js/47.ad76999e.js"><link rel="prefetch" href="/wiki/assets/js/48.577109dd.js"><link rel="prefetch" href="/wiki/assets/js/49.28510d79.js"><link rel="prefetch" href="/wiki/assets/js/5.4ea5dfa0.js"><link rel="prefetch" href="/wiki/assets/js/50.404d75ba.js"><link rel="prefetch" href="/wiki/assets/js/51.ce7f7c65.js"><link rel="prefetch" href="/wiki/assets/js/52.6c02ed97.js"><link rel="prefetch" href="/wiki/assets/js/53.53778043.js"><link rel="prefetch" href="/wiki/assets/js/54.07db5a36.js"><link rel="prefetch" href="/wiki/assets/js/55.b379e144.js"><link rel="prefetch" href="/wiki/assets/js/56.dd382143.js"><link rel="prefetch" href="/wiki/assets/js/57.aeb3a498.js"><link rel="prefetch" href="/wiki/assets/js/58.f5bf42b5.js"><link rel="prefetch" href="/wiki/assets/js/59.28d3b982.js"><link rel="prefetch" href="/wiki/assets/js/6.3d792252.js"><link rel="prefetch" href="/wiki/assets/js/60.69046785.js"><link rel="prefetch" href="/wiki/assets/js/61.55d7cadc.js"><link rel="prefetch" href="/wiki/assets/js/62.5cd8b82e.js"><link rel="prefetch" href="/wiki/assets/js/63.614d79b0.js"><link rel="prefetch" href="/wiki/assets/js/64.99250037.js"><link rel="prefetch" href="/wiki/assets/js/65.91e435b5.js"><link rel="prefetch" href="/wiki/assets/js/66.db94107e.js"><link rel="prefetch" href="/wiki/assets/js/67.fce2bea9.js"><link rel="prefetch" href="/wiki/assets/js/68.d3598022.js"><link rel="prefetch" href="/wiki/assets/js/69.b1413b06.js"><link rel="prefetch" href="/wiki/assets/js/7.70e86b9a.js"><link rel="prefetch" href="/wiki/assets/js/70.062f493f.js"><link rel="prefetch" href="/wiki/assets/js/71.d220dd16.js"><link rel="prefetch" href="/wiki/assets/js/72.eac72e69.js"><link rel="prefetch" href="/wiki/assets/js/73.73fc09e7.js"><link rel="prefetch" href="/wiki/assets/js/74.a9fa84a7.js"><link rel="prefetch" href="/wiki/assets/js/75.8b049679.js"><link rel="prefetch" href="/wiki/assets/js/76.1981648d.js"><link rel="prefetch" href="/wiki/assets/js/77.6dcfbe2c.js"><link rel="prefetch" href="/wiki/assets/js/78.cdde41e8.js"><link rel="prefetch" href="/wiki/assets/js/79.d23b91b6.js"><link rel="prefetch" href="/wiki/assets/js/8.69d4c19e.js"><link rel="prefetch" href="/wiki/assets/js/80.e4244013.js"><link rel="prefetch" href="/wiki/assets/js/81.2139ae8f.js"><link rel="prefetch" href="/wiki/assets/js/82.828a6161.js"><link rel="prefetch" href="/wiki/assets/js/83.673a152c.js"><link rel="prefetch" href="/wiki/assets/js/84.34bf1c3e.js"><link rel="prefetch" href="/wiki/assets/js/85.1894256f.js"><link rel="prefetch" href="/wiki/assets/js/86.82cf417e.js"><link rel="prefetch" href="/wiki/assets/js/87.c8ccd2c7.js"><link rel="prefetch" href="/wiki/assets/js/88.64781ba4.js"><link rel="prefetch" href="/wiki/assets/js/89.2e0c3df8.js"><link rel="prefetch" href="/wiki/assets/js/9.730bb8ee.js"><link rel="prefetch" href="/wiki/assets/js/90.b2ed9ed2.js"><link rel="prefetch" href="/wiki/assets/js/91.325208dc.js"><link rel="prefetch" href="/wiki/assets/js/92.472f67ef.js"><link rel="prefetch" href="/wiki/assets/js/93.7c020475.js"><link rel="prefetch" href="/wiki/assets/js/94.5ed77f23.js"><link rel="prefetch" href="/wiki/assets/js/95.8164c5ba.js"><link rel="prefetch" href="/wiki/assets/js/96.5bbf33be.js"><link rel="prefetch" href="/wiki/assets/js/97.53b12489.js"><link rel="prefetch" href="/wiki/assets/js/98.f8c021d3.js"><link rel="prefetch" href="/wiki/assets/js/99.66f03943.js">
    <link rel="stylesheet" href="/wiki/assets/css/0.styles.a415fee5.css">
  </head>
  <body>
    <div id="app" data-server-rendered="true"><div class="theme-container"><header class="navbar"><div class="sidebar-button"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" viewBox="0 0 448 512" class="icon"><path fill="currentColor" d="M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z"></path></svg></div> <a href="/wiki/" class="home-link router-link-active"><!----> <span class="site-name">TIL wiki</span></a> <div class="links"><div class="search-box"><input aria-label="Search" autocomplete="off" spellcheck="false" value=""> <!----></div> <nav class="nav-links can-hide"> <a href="https://github.com/pravusid/TIL" target="_blank" rel="noopener noreferrer" class="repo-link">
    GitHub
    <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></nav></div></header> <div class="sidebar-mask"></div> <aside class="sidebar"><nav class="nav-links"> <a href="https://github.com/pravusid/TIL" target="_blank" rel="noopener noreferrer" class="repo-link">
    GitHub
    <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></nav>  <ul class="sidebar-links"><li><section class="sidebar-group depth-0"><p class="sidebar-heading open"><span>TypeScript - Utility Types</span> <!----></p> <ul class="sidebar-links sidebar-group-items"><li><a href="/wiki/TypeScript/typescript-utility-types#partial-t" class="sidebar-link">Partial&lt;T&gt;</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#required-t" class="sidebar-link">Required&lt;T&gt;</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#readonly-t" class="sidebar-link">Readonly&lt;T&gt;</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#record-k-t" class="sidebar-link">Record&lt;K,T&gt;</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#pick-t-k" class="sidebar-link">Pick&lt;T,K&gt;</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#omit-t-k" class="sidebar-link">Omit&lt;T, K&gt;</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#exclude-t-u" class="sidebar-link">Exclude&lt;T,U&gt;</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#extract-t-u" class="sidebar-link">Extract&lt;T,U&gt;</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#nonnullable-t" class="sidebar-link">NonNullable&lt;T&gt;</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#parameters-t" class="sidebar-link">Parameters&lt;T&gt;</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#constructorparameters-t" class="sidebar-link">ConstructorParameters&lt;T&gt;</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#returntype-t" class="sidebar-link">ReturnType&lt;T&gt;</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#instancetype-t" class="sidebar-link">InstanceType&lt;T&gt;</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#thisparametertype-t" class="sidebar-link">ThisParameterType&lt;T&gt;</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#omitthisparameter-t" class="sidebar-link">OmitThisParameter&lt;T&gt;</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#thistype-t" class="sidebar-link">ThisType&lt;T&gt;</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#intrinsic-string-manipulation-types" class="sidebar-link">Intrinsic String Manipulation Types</a><ul class="sidebar-sub-headers"></ul></li><li><a href="/wiki/TypeScript/typescript-utility-types#타입활용" class="sidebar-link">타입활용</a><ul class="sidebar-sub-headers"><li class="sidebar-sub-header"><a href="/wiki/TypeScript/typescript-utility-types#infer-nonfunctionproperties" class="sidebar-link">infer NonFunctionProperties</a></li><li class="sidebar-sub-header"><a href="/wiki/TypeScript/typescript-utility-types#infer-onlytypeproperties" class="sidebar-link">infer OnlyTypeProperties</a></li><li class="sidebar-sub-header"><a href="/wiki/TypeScript/typescript-utility-types#mutable-t-immutable-t" class="sidebar-link">Mutable&lt;T&gt;, Immutable&lt;T&gt;</a></li><li class="sidebar-sub-header"><a href="/wiki/TypeScript/typescript-utility-types#awaited-t" class="sidebar-link">Awaited&lt;T&gt;</a></li><li class="sidebar-sub-header"><a href="/wiki/TypeScript/typescript-utility-types#nullable-t" class="sidebar-link">Nullable&lt;T&gt;</a></li><li class="sidebar-sub-header"><a href="/wiki/TypeScript/typescript-utility-types#optional-t" class="sidebar-link">Optional&lt;T&gt;</a></li><li class="sidebar-sub-header"><a href="/wiki/TypeScript/typescript-utility-types#array-filter-with-type-guard" class="sidebar-link">Array.filter with type-guard</a></li></ul></li></ul></section></li></ul> </aside> <main class="page"> <div class="theme-default-content content__default"><h1 id="typescript-utility-types"><a href="#typescript-utility-types" class="header-anchor">#</a> TypeScript - Utility Types</h1> <ul><li>문서: <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html" target="_blank" rel="noopener noreferrer">https://www.typescriptlang.org/docs/handbook/utility-types.html<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li> <li>구현: <a href="https://github.com/microsoft/TypeScript/blob/main/lib/lib.es5.d.ts#L1468" target="_blank" rel="noopener noreferrer">https://github.com/microsoft/TypeScript/blob/main/lib/lib.es5.d.ts#L1468<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li></ul> <p>TypeScript에서는 타입 변환을 편리하게 할 수 있는 유틸리티 타입을 global scope로 사용할 수 있다.</p> <h2 id="partial-t"><a href="#partial-t" class="header-anchor">#</a> <code>Partial&lt;T&gt;</code></h2> <p><code>T</code> 타입의 모든 프로퍼티를 optional로 설정하여 해당 타입의 subset을 표현하는 타입을 반환한다.</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">updateTodo</span><span class="token punctuation">(</span>todo<span class="token operator">:</span> Todo<span class="token punctuation">,</span> fieldsToUpdate<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>todo<span class="token punctuation">,</span> <span class="token operator">...</span>fieldsToUpdate <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> todo1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">'organize desk'</span><span class="token punctuation">,</span>
  description<span class="token operator">:</span> <span class="token string">'clear clutter'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> todo2 <span class="token operator">=</span> <span class="token function">updateTodo</span><span class="token punctuation">(</span>todo1<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  description<span class="token operator">:</span> <span class="token string">'throw out trash'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="required-t"><a href="#required-t" class="header-anchor">#</a> <code>Required&lt;T&gt;</code></h2> <p><code>T</code> 타입의 모든 프로퍼티를 required(!optional)로 설정한 타입을 반환한다.</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
  a<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  b<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> obj<span class="token operator">:</span> Props <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>

<span class="token keyword">const</span> obj2<span class="token operator">:</span> Required<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Error: property 'b' missing</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="readonly-t"><a href="#readonly-t" class="header-anchor">#</a> <code>Readonly&lt;T&gt;</code></h2> <p><code>T</code> 타입의 모든 프로퍼티를 <code>readonly</code>로 설정한(재할당 불가) 타입을 반환한다.</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> todo<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">'Delete inactive users'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

todo<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span> <span class="token comment">// Error: cannot reassign a readonly property</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>런타임에 재할당이 되지 않아야 하는 경우를 나타내는데 유용하다. (<code>Object.freeze</code>)</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">freeze</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="record-k-t"><a href="#record-k-t" class="header-anchor">#</a> <code>Record&lt;K,T&gt;</code></h2> <p><code>T</code> 타입의 프로퍼티[세트] <code>K</code>를 가지는 타입을 반환한다.</p> <p><code>Record&lt;K,T&gt;</code>는 특정 타입의 프로퍼티를 다른 타입으로 매핑하기 위해 사용할 수 있다.</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">interface</span> <span class="token class-name">PageInfo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Page</span> <span class="token operator">=</span> <span class="token string">'home'</span> <span class="token operator">|</span> <span class="token string">'about'</span> <span class="token operator">|</span> <span class="token string">'contact'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> x<span class="token operator">:</span> Record<span class="token operator">&lt;</span>Page<span class="token punctuation">,</span> PageInfo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  about<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">'about'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  contact<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">'contact'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  home<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">'home'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="pick-t-k"><a href="#pick-t-k" class="header-anchor">#</a> <code>Pick&lt;T,K&gt;</code></h2> <p><code>T</code> 타입으로부터 프로퍼티[세트] <code>K</code>를 선택한 타입(subset)을 반환한다.</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  completed<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">TodoPreview</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">'title'</span> <span class="token operator">|</span> <span class="token string">'completed'</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> todo<span class="token operator">:</span> TodoPreview <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">'Clean room'</span><span class="token punctuation">,</span>
  completed<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>Todo</code>에서 <code>title</code>과 <code>description?</code>을 사용하는 타입의 예제는 다음과 같다.</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">type</span> <span class="token class-name">NoStatus</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> Pick<span class="token operator">&lt;</span>Partial<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token string">'description'</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> picked1<span class="token operator">:</span> NoStatus <span class="token operator">=</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">'포켓몬스터'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
<span class="token keyword">const</span> picked2<span class="token operator">:</span> NoStatus <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">'포켓몬스터'</span><span class="token punctuation">,</span>
  description<span class="token operator">:</span> <span class="token string">'피카츄는 내친구'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="omit-t-k"><a href="#omit-t-k" class="header-anchor">#</a> <code>Omit&lt;T, K&gt;</code></h2> <p><code>Omit&lt;T, K&gt;</code> 타입은 포함되지 않았는데 <code>Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;</code>타입으로 사용할 수 있기 때문이다.</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  location<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">RemainingKeys</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> Person<span class="token punctuation">,</span> <span class="token string">'location'</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">QuantumPerson</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> RemainingKeys<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// equivalent to</span>
<span class="token keyword">type</span> <span class="token class-name">QuantumPerson</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>TypeScript 3.5에서 자주 발생하는 이러한 유형의 작업을 처리하기 위한 Helper 타입이 추기되었다.</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">type</span> <span class="token class-name">Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>위와 같이 별도로 <code>Omit</code> 타입을 정의할 필요 없이 <code>lib.d.ts</code>에 포함된 타입을 사용하면 된다.</p> <p>컴파일러는 <code>Omit</code> 타입을 통해 제네릭에서 object rest destructuring 선언을 통해 생성된 타입을 표현한다.</p> <h2 id="exclude-t-u"><a href="#exclude-t-u" class="header-anchor">#</a> <code>Exclude&lt;T,U&gt;</code></h2> <p><code>T</code> 타입으로부터 프로퍼티[세트] <code>U</code>와 <code>T</code> 타입의 공통 프로퍼티들을 제외한 타입을 반환한다.
(<code>T</code> 타입에서 <code>U</code> 타입에 할당가능한 모든 프로퍼티를 제외함)</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token string">'a'</span> <span class="token operator">|</span> <span class="token string">'b'</span> <span class="token operator">|</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;b&quot; | &quot;c&quot;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token string">'a'</span> <span class="token operator">|</span> <span class="token string">'b'</span> <span class="token operator">|</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">|</span> <span class="token string">'b'</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;c&quot;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">Function</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string | number</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p><code>Exclude</code> 타입은 정확히는 <code>Diff</code> 타입의 구현이다.
<code>Diff</code>가 정의되어 있는 코드와 충돌을 회피하기 위해서 <code>Exclude</code>로 명명하였다.
또한 의미론적으로 더 나은 느낌을 전달한다.</p></blockquote> <h2 id="extract-t-u"><a href="#extract-t-u" class="header-anchor">#</a> <code>Extract&lt;T,U&gt;</code></h2> <p><code>T</code> 타입으로부터 프로퍼티[세트] <code>U</code>와 <code>T</code> 타입의 공통 프로퍼티들을 추출한 타입을 반환한다.
(<code>T</code> 타입으로부터 <code>U</code> 타입에 할당할 수 있는 모든 프로퍼티를 추출)</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token string">'a'</span> <span class="token operator">|</span> <span class="token string">'b'</span> <span class="token operator">|</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">|</span> <span class="token string">'f'</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;a&quot;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">Function</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// () =&gt; void</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="nonnullable-t"><a href="#nonnullable-t" class="header-anchor">#</a> <code>NonNullable&lt;T&gt;</code></h2> <p><code>T</code> 타입에서 <code>null</code> 과 <code>undefined</code>를 제외한 타입을 반환한다.</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string | number</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string[]</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="parameters-t"><a href="#parameters-t" class="header-anchor">#</a> <code>Parameters&lt;T&gt;</code></h2> <p>함수 타입의 모든 파라미터 타입들을 추출한다.</p> <p>모든 파라미터 타입들을 튜플 타입 형태로 제공한다.
대상이 함수가 아니면 <code>never</code> 타입을 반환한다.
여러 파라미터가 단일 타입으로 구성된다면 해당타입의 배열로 출력된다.</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// []</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> <span class="token builtin">Array</span><span class="token punctuation">.</span>isArray<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// [any]</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> parseInt<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// [string, (number | undefined)?]</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> Math<span class="token punctuation">.</span>max<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// number[]</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="constructorparameters-t"><a href="#constructorparameters-t" class="header-anchor">#</a> <code>ConstructorParameters&lt;T&gt;</code></h2> <p>생성자 함수 타입의 모든 파라미터 타입들을 추출한다.</p> <p>모든 파라미터 타입들을 튜플 타입 형태로 제공한다.
대상이 (생성자)함수가 아니면 <code>never</code> 타입을 반환한다.</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>ErrorConstructor<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// [(string | undefined)?]</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>FunctionConstructor<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string[]</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>RegExpConstructor<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// [string, (string | undefined)?]</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="returntype-t"><a href="#returntype-t" class="header-anchor">#</a> <code>ReturnType&lt;T&gt;</code></h2> <p>함수형 타입 <code>T</code>의 반환형을 반환한다.</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// void</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T3</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// number[]</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T4</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> f1<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// { a: number, b: string }</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T5</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// any</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T6</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// any</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T7</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T8</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token builtin">Function</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="instancetype-t"><a href="#instancetype-t" class="header-anchor">#</a> <code>InstanceType&lt;T&gt;</code></h2> <p>생성자 함수 타입 <code>T</code>의 인스턴스 타입을 반환한다.</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span>
  x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> <span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// C</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// any</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// any</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T3</span></span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T4</span></span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token builtin">Function</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="thisparametertype-t"><a href="#thisparametertype-t" class="header-anchor">#</a> <code>ThisParameterType&lt;T&gt;</code></h2> <p>함수 타입의 <code>this</code> 파라미터 타입을, <code>this</code> 파라미터가 없는 경우 <code>unknown</code> 타입을 추출한다</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">function</span> <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> Number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">numberToString</span><span class="token punctuation">(</span>n<span class="token operator">:</span> ThisParameterType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> toHex<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">toHex</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="omitthisparameter-t"><a href="#omitthisparameter-t" class="header-anchor">#</a> <code>OmitThisParameter&lt;T&gt;</code></h2> <p>타입에서 <code>this</code> 파라미터를 제외한다</p> <p>만약 명시적으로 선언된 <code>this</code> 파라미터가 없다면 결과는 그대로의 타입이다.
명시적으로 선언된 <code>this</code> 파라미터가 있으면 <code>this</code> 파리미터가 제외된 새 타입이 <code>T</code>로 부터 생성된다.</p> <p>제너릭은 지워지고, 마지막 함수의 overload signature가 새로운 함수타입으로 전파된다.</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">function</span> <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> Number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> fiveToHex<span class="token operator">:</span> OmitThisParameter<span class="token operator">&lt;</span><span class="token keyword">typeof</span> toHex<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">toHex</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fiveToHex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="thistype-t"><a href="#thistype-t" class="header-anchor">#</a> <code>ThisType&lt;T&gt;</code></h2> <p>이 유틸리티 타입은 변환된 타입을 반환하지 않는다. 대신 <code>this</code>의 문맥적 marker를 제공한다.</p> <p><code>ThisType&lt;T&gt;</code>를 사용하기 위해서는 컴파일러의 <code>--noImplicitThis</code> 옵션을 사용해야 한다.</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">type</span> <span class="token class-name">ObjectDescriptor<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  data<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">D</span><span class="token punctuation">;</span>
  methods<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">M</span> <span class="token operator">&amp;</span> ThisType<span class="token operator">&lt;</span><span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Type of 'this' in methods is D &amp; M</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">makeObject</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>desc<span class="token operator">:</span> ObjectDescriptor<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> data<span class="token operator">:</span> object <span class="token operator">=</span> desc<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> methods<span class="token operator">:</span> object <span class="token operator">=</span> desc<span class="token punctuation">.</span>methods <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>data<span class="token punctuation">,</span> <span class="token operator">...</span>methods <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">makeObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">moveBy</span><span class="token punctuation">(</span>dx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> dy<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> dx<span class="token punctuation">;</span> <span class="token comment">// Strongly typed this</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> dy<span class="token punctuation">;</span> <span class="token comment">// Strongly typed this</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">moveBy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>위의 예제에서 <code>makeObject</code> 인수의 methods 객체는 <code>thisType &lt;D &amp; M&gt;</code>을 포함하는 문맥 타입을 가지므로,
methods 객체 내 메소드에서의 this 타입은 <code>{ x: number, y: number } &amp; { moveBy (dx: number, dy: number): number }</code>이다.
methods 프로퍼티의 타입이 추론 대상임과 동시에 메소드의 <code>this</code> 타입의 source임을 확인하라.</p> <p><code>ThisType&lt;T&gt;</code> 마커 인터페이스는 <code>lib.d.ts</code>에 선언 된 비어있는 인터페이스이다.
인터페이스는 객체 리터럴의 문맥적 타입에서 인식되는 것 이외에도 비어있는 인터페이스처럼 작동한다.</p> <h2 id="intrinsic-string-manipulation-types"><a href="#intrinsic-string-manipulation-types" class="header-anchor">#</a> Intrinsic String Manipulation Types</h2> <p><a href="https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html#uppercasestringtype" target="_blank" rel="noopener noreferrer">https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html#uppercasestringtype<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p> <p>template string literals 타입의 유틸리티 타입으로 추가되었으며, 다음 네 가지가 있다</p> <ul><li><code>Uppercase&lt;StringType&gt;</code></li> <li><code>Lowercase&lt;StringType&gt;</code></li> <li><code>Capitalize&lt;StringType&gt;</code></li> <li><code>Uncapitalize&lt;StringType&gt;</code></li></ul> <h2 id="타입활용"><a href="#타입활용" class="header-anchor">#</a> 타입활용</h2> <h3 id="infer-nonfunctionproperties"><a href="#infer-nonfunctionproperties" class="header-anchor">#</a> <code>infer NonFunctionProperties</code></h3> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">type</span> <span class="token class-name">NonFunctionPropertyNames<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">NonFunctionProperties<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> NonFunctionPropertyNames<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="infer-onlytypeproperties"><a href="#infer-onlytypeproperties" class="header-anchor">#</a> <code>infer OnlyTypeProperties</code></h3> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">OnlyTypePropertyNames<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// eslint-disable-next-line @typescript-eslint/ban-types</span>
  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">O</span></span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="mutable-t-immutable-t"><a href="#mutable-t-immutable-t" class="header-anchor">#</a> <code>Mutable&lt;T&gt;</code>, <code>Immutable&lt;T&gt;</code></h3> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token comment">// eslint-disable-next-line @typescript-eslint/ban-types</span>
<span class="token keyword">type</span> <span class="token class-name">Primitive</span> <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">Function</span> <span class="token operator">|</span> <span class="token builtin">symbol</span> <span class="token operator">|</span> bigint<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Mutable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Primitive</span>
  <span class="token operator">?</span> <span class="token constant">T</span>
  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ReadonlyArray<span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span>
  <span class="token operator">?</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Mutable<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;&gt;</span>
  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ReadonlyMap<span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">K</span><span class="token punctuation">,</span> <span class="token keyword">infer</span> <span class="token constant">V</span><span class="token operator">&gt;</span></span>
  <span class="token operator">?</span> Map<span class="token operator">&lt;</span>Mutable<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> Mutable<span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">&gt;&gt;</span>
  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ReadonlySet<span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">S</span><span class="token operator">&gt;</span></span>
  <span class="token operator">?</span> Set<span class="token operator">&lt;</span>Mutable<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;&gt;</span>
  <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> Mutable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Immutable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Primitive</span>
  <span class="token operator">?</span> <span class="token constant">T</span>
  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span>
  <span class="token operator">?</span> ReadonlyArray<span class="token operator">&lt;</span>Immutable<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;&gt;</span>
  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">K</span><span class="token punctuation">,</span> <span class="token keyword">infer</span> <span class="token constant">V</span><span class="token operator">&gt;</span></span>
  <span class="token operator">?</span> ReadonlyMap<span class="token operator">&lt;</span>Immutable<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> Immutable<span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">&gt;&gt;</span>
  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Set<span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">S</span><span class="token operator">&gt;</span></span>
  <span class="token operator">?</span> ReadonlySet<span class="token operator">&lt;</span>Immutable<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;&gt;</span>
  <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> Immutable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="awaited-t"><a href="#awaited-t" class="header-anchor">#</a> <code>Awaited&lt;T&gt;</code></h3> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Awaited<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h3 id="nullable-t"><a href="#nullable-t" class="header-anchor">#</a> <code>Nullable&lt;T&gt;</code></h3> <p><code>Partial&lt;T&gt;</code>과 유사하지만 <code>undefined</code> 대신 <code>null</code>을 사용하는 경우</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Nullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="optional-t"><a href="#optional-t" class="header-anchor">#</a> <code>Optional&lt;T&gt;</code></h3> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Optional<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

<span class="token comment">// 함수형 스타일로 결과를 처리할 수 있다</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> unwrap <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>optional<span class="token operator">:</span> Optional<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>optional <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> optional<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'optional object is undefined'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="array-filter-with-type-guard"><a href="#array-filter-with-type-guard" class="header-anchor">#</a> <code>Array.filter</code> with type-guard</h3> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token comment">// type narrowing issue in TS Array.filter</span>
<span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (number | undefined)[]</span>

<span class="token comment">// 타입가드가 포함된 HOF 사용시</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">isTruthy</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> obj <span class="token keyword">is</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isTruthy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number[]</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>type-guard를 객체의 프로퍼티에 적용할 수도 있다</p> <div class="language-ts line-numbers-mode"><pre class="language-ts"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Convinced<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token constant">R</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">infer</span></span> <span class="token constant">I</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token constant">I</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">&amp;</span>
  Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">hasTruthyValueIn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> obj <span class="token keyword">is</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> Convinced<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token operator">!</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">hasTruthyValueIn</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { id: number }[]</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div> <footer class="page-edit"><!----> <!----></footer> <!----> </main></div><div class="global-ui"><!----></div></div>
    <script src="/wiki/assets/js/app.8c48789a.js" defer></script><script src="/wiki/assets/js/2.ffb6456b.js" defer></script><script src="/wiki/assets/js/230.b95ea744.js" defer></script>
  </body>
</html>
