(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{319:function(s,t,a){"use strict";a.r(t);var n=a(17),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"애노테이션과-리플렉션"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#애노테이션과-리플렉션"}},[s._v("#")]),s._v(" 애노테이션과 리플렉션")]),s._v(" "),a("h2",{attrs:{id:"애노테이션-선언과-적용"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#애노테이션-선언과-적용"}},[s._v("#")]),s._v(" 애노테이션 선언과 적용")]),s._v(" "),a("h3",{attrs:{id:"애노테이션-적용"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#애노테이션-적용"}},[s._v("#")]),s._v(" 애노테이션 적용")]),s._v(" "),a("p",[s._v("애노테이션 적용은 "),a("code",[s._v("@")]),s._v("과 애노테이션 이름으로 이루어진다.")]),s._v(" "),a("p",[s._v("코틀린의 "),a("code",[s._v("@Deprecated")]),s._v(" 애노테이션은 "),a("code",[s._v("replaceWith")]),s._v(" 파라미터를 통해 옛버전을 대신할 수 있는 패턴을 제시할 수 있다.")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation builtin"}},[s._v("@Deprecated")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Use removeAt(index) instead."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ReplaceWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"removeAt(index)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("애노테이션에 인자를 넘길 때는 일반 함수와 마찬가지로 괄호 안에 인자를 넣는다.\n애노테이션의 인자로는 원시 타입의 값, 문자열, enum, 클래스 참조, 다른 애노테이션 클래스, 그리고 앞의 요소들로 이루어진 배열이 들어갈 수 있다.")]),s._v(" "),a("p",[s._v("애노테이션 인자를 지정하는 문법은 자바와 약간 다르다.")]),s._v(" "),a("ul",[a("li",[s._v("클래스를 애노테이션 인자로 지정할 때는 "),a("code",[s._v("@MyAnnotation(MyClass::class)")]),s._v(" 처럼 "),a("code",[s._v("::class")]),s._v("를 클래스 이름 뒤에 넣어야 한다.")]),s._v(" "),a("li",[s._v("다른 애노테이션을 인자로 지정할 때는 인자로 들어가는 애노테이션 앞에 "),a("code",[s._v("@")]),s._v("를 넣지 않아야 한다. 위 예제의 "),a("code",[s._v("ReplaceWith")]),s._v("는 애노테이션이다.")]),s._v(" "),a("li",[s._v("배열을 인자로 지정하려면 "),a("code",[s._v('@RequestMapping(path=arrayOf("/foo", "/bar"))')]),s._v(" 처럼 "),a("code",[s._v("arrayOf")]),s._v(" 함수를 사용한다.\n자바에서 선언한 애노테이션 클래스를 사용한다면 "),a("code",[s._v("value")]),s._v("라는 이름의 파라미터가 필요에 따라 자동으로 가변 길이 인자로 변환된다.\n따라서 그런 경우에는 "),a("code",[s._v('@JavaAnnotationWithArrayValue("abc", "foo", "bar")')]),s._v(" 처럼 "),a("code",[s._v("arrayOf")]),s._v(" 함수를 쓰지 않아도 된다.")])]),s._v(" "),a("p",[s._v("애노테이션 인자를 컴파일 시점에 알 수 있어야 하므로 임의의 프로퍼티를 인자로 지정할 수는 없다.\n프로퍼티를 애노테이션 인자로 사용하려면 그 앞에 "),a("code",[s._v("const")]),s._v(" 변경자를 붙여야한다.")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" TEST_TIMEOUT "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100L")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation builtin"}},[s._v("@Test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("timeout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" TEST_TIMEOUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("testMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"애노테이션-대상"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#애노테이션-대상"}},[s._v("#")]),s._v(" 애노테이션 대상")]),s._v(" "),a("p",[s._v("애노테이션을 붙일 때 어떤 요소에 애노테이션을 붙일지 표시할 필요가 있다.\nuse-site target 선언으로 애노테이션을 붙일 요소를 정할 수 있다.")]),s._v(" "),a("p",[s._v("다음은 "),a("code",[s._v("@Rule")]),s._v(" 애노테이션을 프로퍼티 getter에 적용하는 예이다 : "),a("code",[s._v("@get:Rule")])]),s._v(" "),a("p",[s._v("애노테이션을 사용하는 예를 보자")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" HasTempFolder "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token annotation builtin"}},[s._v("@get:Rule")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" folder "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TemporaryFolder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token annotation builtin"}},[s._v("@Test")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("testUsingTempFolder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" createdFile "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" folder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("newFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"myfile.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" createdFolder "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" folder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("newFolder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"subfolder"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("자바에 선언된 애노테이션을 사용해 프로퍼티에 애노테이션을 붙이는 경우 기본적으로 프로퍼티의 필드에 애노테이션을 붙인다.\n하지만 코틀린으로 애노테이션을 선언하면 프로퍼티에 직접 적용할 수 있는 애노테이션을 만들 수 있다.\n지원하는 대상 목록은 다음과 같다.")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("property")]),s._v(": 프로퍼티 전체, 자바에 선언된 애노테이션에는 이 사용 지점 대상을 사용할 수 없다")]),s._v(" "),a("li",[a("code",[s._v("field")]),s._v(": 프로퍼티에 의해 생성되는 필드")]),s._v(" "),a("li",[a("code",[s._v("get")]),s._v(": 프로퍼티 게터")]),s._v(" "),a("li",[a("code",[s._v("set")]),s._v(": 프로퍼티 세터")]),s._v(" "),a("li",[a("code",[s._v("receiver")]),s._v(": 확장함수나 프로퍼티 수신 객체 파라미터")]),s._v(" "),a("li",[a("code",[s._v("param")]),s._v(": 생성자 파라미터")]),s._v(" "),a("li",[a("code",[s._v("setparam")]),s._v(": 세터 파라미터")]),s._v(" "),a("li",[a("code",[s._v("delegate")]),s._v(": 위임 프로퍼티의 위임 인스턴스를 담아둔 필드")]),s._v(" "),a("li",[a("code",[s._v("file")]),s._v(": 파일안에 선언된 최상위 함수와 프로퍼티를 담아두는 클래스, "),a("code",[s._v("package")]),s._v(" 선언 앞에서 파일의 최상위 수준에만 적용가능 하다.")])]),s._v(" "),a("p",[s._v("자바와 달리 코틀린에서는 애노테이션 인자로 클래스나 함수 선언이나 타입 외에 임의의 식을 허용한다.\n다음은 안전하지 못한 캐스팅 경고를 무시하는 로컬 변수 선언이다")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token annotation builtin"}},[s._v("@Suppress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"UNCHECKED_CAST"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" strings "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("String"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"자바-api를-코틀린-애노테이션으로-제어"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#자바-api를-코틀린-애노테이션으로-제어"}},[s._v("#")]),s._v(" 자바 API를 코틀린 애노테이션으로 제어")]),s._v(" "),a("p",[s._v("다음의 애노테이션을 사용하면 코틀린 선언을 자바에 노출시키는 방법을 변경할 수 있다.")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("@JvmName")]),s._v("은 코틀린 선언이 만들어내는 자바 필드나 메소드 이름을 변경한다")]),s._v(" "),a("li",[a("code",[s._v("@JvmStatic")]),s._v("을 메소드, 객체선언, 동반 객체에 적용하면 그 요소가 자바 정적 메소드로 노출된다")]),s._v(" "),a("li",[a("code",[s._v("@JvmOverloads")]),s._v("를 사용하면 디폴트 파라미터 값이 있는 함수에 대해 컴파일러가 자동으로 오버로딩한 함수를 생성해준다")]),s._v(" "),a("li",[a("code",[s._v("@JvmField")]),s._v("를 프로퍼티에 사용하면 게터나 세터가 없는 "),a("code",[s._v("public")]),s._v(" 자바 필드로 프로퍼티를 노출시킨다")])]),s._v(" "),a("h3",{attrs:{id:"애노테이션을-활용한-json-직렬화"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#애노테이션을-활용한-json-직렬화"}},[s._v("#")]),s._v(" 애노테이션을 활용한 JSON 직렬화")]),s._v(" "),a("p",[s._v("애노테이션을 사용하는 고전적인 예제로 객체 직렬화 제어를 들 수 있다.\n직렬화는 객체럴 저장장치에 저장하거나 네트워크를 통해 전송하기 위해 텍스트나 이진 형식으로 변환하는 것이다.")]),s._v(" "),a("p",[s._v("JSON 직렬화를 위한 제이키드 라이브러리 예제를 살펴보자\n객체를 JSON으로 직렬화할 때 제이키드 라이브러리는 기본적으로 모든 프로퍼티를 직렬화 하며 프로퍼티 이름을 키로 사용한다.\n애노테이션을 사용하면 이런 동작을 변경할 수 있다.")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("@JsonExclude")]),s._v(" 애노테이션을 사용하면 직렬화나 역직렬화 시 그 프로퍼티를 무시할 수 있다.")]),s._v(" "),a("li",[a("code",[s._v("@JsonName")]),s._v(" 애노테이션을 사용하면 프로퍼티를 표현하는 키/값 쌍의 키로 프로퍼티 이름 대신 애노테이션이 지정한 이름을 쓸 수 있다.")])]),s._v(" "),a("h3",{attrs:{id:"애노테이션-선언"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#애노테이션-선언"}},[s._v("#")]),s._v(" 애노테이션 선언")]),s._v(" "),a("p",[s._v("애노테이션을 선언하려면 "),a("code",[s._v("class")]),s._v(" 키워드 앞에 "),a("code",[s._v("annotation")]),s._v("이라는 변경자를 붙인다.\n파라미터가 있는 애노테이션을 정의하려면 애노테이션 클래스 주 생성자에 파라미터를 선언해야 하고 모든 파라미터에 "),a("code",[s._v("val")]),s._v("을 붙여야 한다.")]),s._v(" "),a("p",[s._v("자바 애노테이션에는 "),a("code",[s._v("vale")]),s._v("라는 특별 메소드가 있고, 코틀린 애노테이션에는 "),a("code",[s._v("name")]),s._v("이라는 프로퍼티가 있다.")]),s._v(" "),a("h3",{attrs:{id:"메타애노테이션"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#메타애노테이션"}},[s._v("#")]),s._v(" 메타애노테이션")]),s._v(" "),a("p",[s._v("애노테이션 클래스에 적용할 수 있는 애노테이션을 메타 애노테이션이라고 부른다.")]),s._v(" "),a("p",[a("code",[s._v("@Target")]),s._v(" 메타애노테이션은 애노테이션을 적용할 수 있는 요소의 유형을 지정한다.\n구체적 "),a("code",[s._v("@Target")]),s._v("을 지정하지 않으면 모든 선언에 적용할 수 있다.\n애노테이션 대상이 정의된 "),a("code",[s._v("enum")]),s._v("은 "),a("code",[s._v("AnnotationTarget")]),s._v("이다: "),a("code",[s._v("@Target(AnnotationTarget.ANNOTATION_CLASS)")])]),s._v(" "),a("p",[a("code",[s._v("@Retention")]),s._v(" 메타애노테이션은 애노테이션 클래스를 소스 수준에서만 유지할지 "),a("code",[s._v(".class")]),s._v("파일에 저장할지,\n실행 시점에 리플렉션을 사용해 접근하게 할지를 지정한다.\n자바 컴파일러는 기본적으로 애노테이션을 "),a("code",[s._v(".class")]),s._v(" 파일에는 저장하지만 런타임에는 사용할 수 없게한다.\n하지만 대부분의 애노테이션은 런타임에도 사용할 수 있어야 하므로 코틀린에서는 기본적으로 애노테이션의 Retention을 "),a("code",[s._v("RUNTIME")]),s._v("으로 지정한다.")]),s._v(" "),a("h3",{attrs:{id:"애노테이션-파라미터로-클래스-사용"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#애노테이션-파라미터로-클래스-사용"}},[s._v("#")]),s._v(" 애노테이션 파라미터로 클래스 사용")]),s._v(" "),a("p",[s._v("제이키드의 "),a("code",[s._v("@DeserializeInterface(MyClass::class)")]),s._v(" 처럼 클래스 참조를 인자로 받는 애노테이션을 정의해보자")]),s._v(" "),a("p",[a("code",[s._v("annotation class DeserializeInterface(val targetClass: KClass<out Any>)")])]),s._v(" "),a("p",[a("code",[s._v("KClass")]),s._v("의 타입 파라미터를 쓸 때 "),a("code",[s._v("out")]),s._v(" 변경자 없이 "),a("code",[s._v("KClass<Any>")]),s._v("라고 쓰면\n"),a("code",[s._v("DeserializeInterface")]),s._v("에 "),a("code",[s._v("MyClass::class")]),s._v("를 인자로 넘길 수 없고 "),a("code",[s._v("Any::class")]),s._v("만 넘길 수 있다.\n"),a("code",[s._v("out")]),s._v(" 키워드가 있으면 모든 타입 "),a("code",[s._v("T")]),s._v("에 대해 "),a("code",[s._v("KClass<T>")]),s._v("가 "),a("code",[s._v("KClass<out Any>")]),s._v("의 하위타입이 된다(공변성)")]),s._v(" "),a("h3",{attrs:{id:"애노테이션-파라미터로-제네릭-클래스-받기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#애노테이션-파라미터로-제네릭-클래스-받기"}},[s._v("#")]),s._v(" 애노테이션 파라미터로 제네릭 클래스 받기")]),s._v(" "),a("p",[s._v("제이키드의 "),a("code",[s._v("@CustomSerializer")]),s._v(" 애노테이션은 커스텀 직렬화 클래스에 대한 참조를 인자로 받는다.\n이 직렬화 클래스는 "),a("code",[s._v("ValueSerializer")]),s._v(" 인터페이스를 구현해야 한다.")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" ValueSerializer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toJsonValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fromJsonValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("jsonValue"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" T\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("날짜를 직렬화 한다고 가정하자. 이때 "),a("code",[s._v("ValueSerializer<Date>")]),s._v("를 구현하는 "),a("code",[s._v("DateSerializer")]),s._v("를 "),a("code",[s._v("Person")]),s._v(" 클래스에 적용한다면")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("data")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token annotation builtin"}},[s._v("@CustomSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("DateSerializer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" birthDate"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Date\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("@CustomSerializer")]),s._v(" 애노테이션을 구현하는 방법을 살펴보자\n"),a("code",[s._v("ValueSerializer")]),s._v(" 타입을 참조하려면 항상 타입인자를 제공해야 한다.\n하지만 이 애노테이션이 어떤 타입에 쓰일지 알 수 없으므로 스타 프로젝션을 사용할 수 있다.")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("annotation")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("CustomSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" serializerClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" KClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("out")]),s._v(" ValueSerializer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"리플렉션"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#리플렉션"}},[s._v("#")]),s._v(" 리플렉션")]),s._v(" "),a("p",[s._v("리플렉션은 실행 시점에 동적으로 객체의 프로퍼티와 메소드에 접근할 수 있게 해주는 방법이다.\n타입과 관계없이 객체를 다뤄야 하거나 객체가 제공하는 메소드나 프로퍼티 이름을 오직 실행시점에만 알 수 있는 경우가 있다.")]),s._v(" "),a("p",[s._v("코틀린 리플렉션을 사용하려면 두 가지 리플렉션 API를 다뤄야 한다.\n하나는 "),a("code",[s._v("java.lang.reflect")]),s._v("이고 다른 하나는 "),a("code",[s._v("kotlin.reflect")]),s._v(" API이다.")]),s._v(" "),a("p",[s._v("코틀린 API에서는 자바에는 없는 프로퍼티나 널이 될 수 있는 타입과 같은 코틀린 고유개념에 대한 리플렉션을 제공한다.")]),s._v(" "),a("h3",{attrs:{id:"코틀린-리플렉션-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#코틀린-리플렉션-api"}},[s._v("#")]),s._v(" 코틀린 리플렉션 API")]),s._v(" "),a("p",[a("code",[s._v("java.lang.Class")]),s._v("에 해당하는 "),a("code",[s._v("KClass")]),s._v("를 사용하면\n클래스 안에 있는 모든 선언을 열거 하고 각 선언에 접근하거나 클래스의 상위 클래스를 얻는등의 작업이 가능하다.\n"),a("code",[s._v("MyClass::class")]),s._v("라는 식을 쓰면 "),a("code",[s._v("KClass")]),s._v("의 인스턴스를 얻을 수 있다.\n실행시점에 객체의 클래스를 얻으려면 먼저 객체의 "),a("code",[s._v("javaClass")]),s._v(" 프로퍼티를 사용해 객체의 자바 클래스를 얻어야한다.\n"),a("code",[s._v("javaClass")]),s._v("는 자바의 "),a("code",[s._v("java.lang.Object.getClass()")]),s._v("와 같다.\n일단 자바 클래스를 얻었으면 "),a("code",[s._v(".kotlin")]),s._v(" 확장 프로퍼티를 통해 자바에서 코틀린 리플렉션 API로 옮겨올 수 있다.")]),s._v(" "),a("p",[a("code",[s._v("KClass")]),s._v(" 에서는 클래스 내부를 살펴볼 때 사용할 수 있는 다양한 메소드가 있다.")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" KClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" simpleName"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" qualifiedName"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" members"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Collection"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("KCallable"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" constructors"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Collection"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("KFunction"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" nestedClasses"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Collection"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("KClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("클래스의 모든 멤버 목록은 "),a("code",[s._v("KCallable")]),s._v(" 인스턴스의 컬렉션이다.\n"),a("code",[s._v("KCallable")]),s._v("은 함수와 프로퍼티를 아우르는 공통 상위 인터페이스이고 그 안에는 "),a("code",[s._v("call")]),s._v(" 메소드가 들어있다.\n"),a("code",[s._v("call")]),s._v(" 메소드를 사용하면 함수나 프로퍼티의 getter를 호출할 수 있다.")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" KCallable"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("out")]),s._v(" R"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("vararg")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" R\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("call")]),s._v("을 사용할 때는 함수 인자를 "),a("code",[s._v("vararg")]),s._v(" 리스트로 전달한다.\n다음 코드는 "),a("code",[s._v("call")]),s._v("을 사용해 함수를 호출하는 예제이다.")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" kFunction "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v("foo\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" kFunction"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("::foo")]),s._v(" 식의 값은 "),a("code",[s._v("KFunction")]),s._v(" 클래스의 인스턴스이다. 이 함수 참조가 가리키는 함수를 호출하려면 "),a("code",[s._v("KCallable.call")]),s._v(" 메소드를 호출한다.\n"),a("code",[s._v("call")]),s._v("에 넘긴 인자 개수와 원래 함수에 정의된 파라미터 개수가 맞아야 한다.")]),s._v(" "),a("p",[s._v("함수를 호출하기 위해 더 구체적인 메소드를 사용할 수 있다.\n"),a("code",[s._v("::foo")]),s._v("의 타입 "),a("code",[s._v("KFunction1<Int, Unit>")]),s._v("에는 파라미터와 반환 값 타입 정보가 들어있다.\n1은 함수의 파라미터가 1개라는 의미이다. "),a("code",[s._v("KFunction1")]),s._v(" 인터페이스를 통해 함수를 호출하려면 "),a("code",[s._v("invoke")]),s._v(" 메소드를 사용해야한다.\n"),a("code",[s._v("invoke")]),s._v("는 정해진 개수의 인자만을 받아들이며, 인자 타입은 "),a("code",[s._v("KFunction1")]),s._v(" 제네릭 인터페이스의 첫 번째 타입 파라미터와 같다.\n또한 "),a("code",[s._v("kfunction")]),s._v("을 직접호출할 수도 있다.")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" y\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" kFunction"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" KFunction2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Int"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v("sum\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("kFunction"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("kFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("KFunction")]),s._v("의 인자 타입과 반환 타입을 모두 다 안다면 "),a("code",[s._v("invoke")]),s._v(" 메소드를 호출하는게 낫다.\n"),a("code",[s._v("call")]),s._v(" 메소드는 타입 안전성을 보장해주지 않기 때문이다.")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("KFunctionN")]),s._v(" 타입은 "),a("code",[s._v("KFunction")]),s._v("을 확장하며 "),a("code",[s._v("N")]),s._v("과 파라미터 개수가 같은 "),a("code",[s._v("invoke")]),s._v("를 추가로 포함한다.\n이런 함수 타입들은 컴파일러가 생성한 합성타입이다. 따라서 "),a("code",[s._v("kotlin.reflect")]),s._v(" 패키지에서 이런 타입의 정의를 찾을 수 는 없다.")])]),s._v(" "),a("p",[a("code",[s._v("KProperty")]),s._v("의 "),a("code",[s._v("call")]),s._v(" 메소드를 호출할 수도 있다. "),a("code",[s._v("KProperty")]),s._v("의 "),a("code",[s._v("call")]),s._v("은 프로퍼티의 getter를 호출한다.\n최상위 프로퍼티는 "),a("code",[s._v("KProperty0")]),s._v(" 인터페이스의 인스턴스로 표현되며, "),a("code",[s._v("KProperty0")]),s._v(" 안에는 인자가 없는 "),a("code",[s._v("get")]),s._v(" 메소드가 있다.")]),s._v(" "),a("blockquote",[a("p",[s._v("최상위 수준이나 클래스 안에 정의된 프로퍼티만 리플렉션으로 접근할 수 있고 함수의 로컬 변수에는 접근할 수 없다.")])]),s._v(" "),a("h3",{attrs:{id:"리플렉션을-사용한-객체-직렬화-구현"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#리플렉션을-사용한-객체-직렬화-구현"}},[s._v("#")]),s._v(" 리플렉션을 사용한 객체 직렬화 구현")]),s._v(" "),a("p",[s._v("우선 제이키드의 직렬화 함수 선언을 살펴보자")]),s._v(" "),a("p",[a("code",[s._v("fun serialize(obj: Any): String")])]),s._v(" "),a("p",[s._v("이 함수는 객체를 받아서 그 객체에 대한 JSON 표현을 문자열로 돌려준다.\n값을 직렬화 하면서 "),a("code",[s._v("StringBuilder")]),s._v(" 객체뒤 직렬화한 문자열을 추가한다.\n"),a("code",[s._v("append")]),s._v(" 호출을 더 간결하게 수행하기 위해 직렬화 기능을 "),a("code",[s._v("StringBuilder")]),s._v("의 확장함수로 구현한다.")]),s._v(" "),a("p",[a("code",[s._v("serialize")]),s._v("는 대부분의 작업을 "),a("code",[s._v("serializeObject")]),s._v("에 위임한다.")]),s._v(" "),a("p",[a("code",[s._v("fun serialize(obj: Any): String = builderString { serializeObject(obj) }")])]),s._v(" "),a("p",[s._v("이제 "),a("code",[s._v("serializeObject")]),s._v(" 구현을 살펴보자")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" StringBuilder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("serializeObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" kClass "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("javaClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("kotlin\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" properties "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" kClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("memberProperties\n\n  properties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("joinToStringBuilder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" prefix "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" postfix "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" prop "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("serializeString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("prop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('": "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("serializePropertyValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("prop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("이 예제에서는 어떤 객체의 클래스에 정의된 모든 프로퍼티를 열거하기 때문에 각 프로퍼티가 어떤 타입인지 알 수 없다.\n따라서 "),a("code",[s._v("prop")]),s._v(" 변수의 타입은 "),a("code",[s._v("KProperty1<Any, *>")]),s._v("이며, "),a("code",[s._v("prop.get(obj)")]),s._v(" 메소드 호출은 "),a("code",[s._v("Any")]),s._v(" 타입의 값을 반환한다.\n하지만 이 코드에서는 어떤 프로퍼티의 "),a("code",[s._v("get")]),s._v("에 넘기는 객체가 바로 그 프로퍼티를 얻어온 객체인 "),a("code",[s._v("obj")]),s._v("이므로 항상 프로퍼티 값이 제대로 반환된다.")]),s._v(" "),a("h3",{attrs:{id:"애노테이션을-활용한-직렬화-제어"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#애노테이션을-활용한-직렬화-제어"}},[s._v("#")]),s._v(" 애노테이션을 활용한 직렬화 제어")]),s._v(" "),a("p",[s._v("애노테이션을 "),a("code",[s._v("serializeObject")]),s._v(" 함수가 어떻게 처리하는지 살펴보자.")]),s._v(" "),a("p",[s._v("어떻게 "),a("code",[s._v("@JsonExclude")]),s._v("가 붙은 프로퍼티를 제외할 수 있을지 살펴보자")]),s._v(" "),a("p",[a("code",[s._v("KAnnotatedElement")]),s._v(" 인터페이스에는 "),a("code",[s._v("annotations")]),s._v(" 프로퍼티가 있다.\n이 프로퍼티는 소스코드상에서 해당요소에 적용된 ("),a("code",[s._v("@Retention")]),s._v("이 "),a("code",[s._v("RUNTIME")]),s._v("인) 모든 애노테이션 인스턴스의 컬렉션이다.\n"),a("code",[s._v("KProperty")]),s._v("는 "),a("code",[s._v("KAnnotatedElement")]),s._v("를 확장하므로 "),a("code",[s._v("property.annotations")]),s._v("를 통해 프로퍼티의 모든 애노테이션을 얻을 수 있다.")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inline")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("reified")]),s._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" KAnnotatedElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("findAnnotation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  annotations"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("filterIsInstance"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("firstOrNull")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("code",[s._v("findAnnotation")]),s._v(" 함수는 인자로 전달받은 타입의 애노테이션이 있으면 반환하고, 타입 파라미터를 "),a("code",[s._v("reified")]),s._v("로 만들어 클래스를 타입인자로 전달한다.")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" properties "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" kClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("memberProperties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("filter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("findAnnotation"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("JsonExclude"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("@JsonName")]),s._v("의 경우 애노테이션 존재여부와 함께 애노테이션 인자도 알아야 한다.")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" jsonNameAnn "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" prop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("findAnnotation"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("JsonName"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" propName "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" jsonNameAnn"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?:")]),s._v(" prop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("Person")]),s._v(" 클래스 인스턴스를 직렬화 하는 과정을 살펴보자.\n"),a("code",[s._v("firstName")]),s._v(" 프로퍼티를 직렬화 하는 동안 "),a("code",[s._v("jsonNameAnn")]),s._v("에는 "),a("code",[s._v("JsonName")]),s._v(" 애노테이션 클래스에 해당하는 인스턴스가 들어있다.")]),s._v(" "),a("p",[s._v("프로퍼티 필터링을 포함하는 객체 직렬화")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" StringBuilder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("serializeObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("javaClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("kotlin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("memberProperties\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("filter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("findAnnotation"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("JsonExclude"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("joinToStringBuilder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" prefix "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" postfix "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("serializeProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" StringBuilder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("serializeProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("prop"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" KProperty1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" jsonNameAnn "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" prop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("findAnnotation"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("JsonName"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" propName "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" jsonNameAnn"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?:")]),s._v(" prop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("serializeString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("propName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('": "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("serializePropertyValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("prop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("마지막으로 "),a("code",[s._v("@CustomSerializer")]),s._v(" 애노테이션을 구현해보자")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[s._v("annotaion "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" CustomSerializer "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" serializerClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" KClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("out")]),s._v(" ValueSerializer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("이를 사용하기 위한 "),a("code",[s._v("getSerializer")]),s._v("를 구현해보자")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" KProperty"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ValueSerializer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" customSerializerAnn "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" findAnnotation"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("CustomSerializer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?:")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" serializerClass "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" customSerializerAnn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("serializerClass\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" valueSerializer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" serializerClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("objectInstance "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?:")]),s._v(" serializerClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token annotation builtin"}},[s._v("@Suppress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"UNCHECKED_CAST"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" valueSerializer "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" ValueSerializer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("code",[s._v("getSerializer")]),s._v("는 "),a("code",[s._v("KProperty")]),s._v("의 확장함수 이다.")]),s._v(" "),a("p",[a("code",[s._v("@CustomSerializer")]),s._v(" 애노테이션으로 처리되는 클래스와 객체는 모두 "),a("code",[s._v("KClass")]),s._v("로 표현된다.\n"),a("code",[s._v("KClass")]),s._v("에서 "),a("code",[s._v("objectInstance")]),s._v(" 호출로 싱글톤 인스턴스를 생성한다.")]),s._v(" "),a("h3",{attrs:{id:"json-파싱과-객체-역직렬화"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json-파싱과-객체-역직렬화"}},[s._v("#")]),s._v(" JSON 파싱과 객체 역직렬화")]),s._v(" "),a("p",[s._v("역직렬화 API는 직렬화와 마찬가지로 함수 하나로 이뤄져 있다.")]),s._v(" "),a("p",[a("code",[s._v("inline fun <reified T: Any> deserialize(json: String): T")])]),s._v(" "),a("p",[s._v("JSON 역직렬화기는 3단계로 구현되어 있다.")]),s._v(" "),a("ol",[a("li",[s._v("어휘 분석기 : lexical analyzer")]),s._v(" "),a("li",[s._v("문법분석기 : syntax analyzer")]),s._v(" "),a("li",[s._v("파서 : parser")])]),s._v(" "),a("p",[s._v("최상위 역직렬화 함수를 정의해보자")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deserialize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("json"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Reader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" targetClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" KClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" T "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" seed "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ObjectSeed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("targetClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("CallsInfoCache")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Parser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("json"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" seed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" seed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("spawn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("객체 역직렬화 하기")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" ObjectSeed"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("out")]),s._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("targetClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" KClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" classInfoCache"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" CallsInfoCache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Seed "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" classInfo"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ClassInfo"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" classInfoCache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("targetClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" valueArguments "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mutableMapOf"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("KParameter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" seedArguments "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mutableMapOf"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("KParameter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" seed"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" arguments"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Map"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("KParameter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" valueArguments "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" seedArguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mapValues")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("spawn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setSimpleProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("propertyName"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" param "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" classInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getConstructorParameter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("propertyName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    valueArguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("param"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" classInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deserializeConstructorArgument")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("param"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createCompositeProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("propertyName"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" isList"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Seed "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" param "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" classInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getConstructorParameter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("propertyName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" deserializeAs "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" classInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDeserializeClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("propertyName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" seed "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createSeedForType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("deserializeAs "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?:")]),s._v(" param"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("javaType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" isList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" seed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apply")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" seedArguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("param"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sapwn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" T "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" classInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("h3",{attrs:{id:"최종-역직렬화-단계"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#최종-역직렬화-단계"}},[s._v("#")]),s._v(" 최종 역직렬화 단계")]),s._v(" "),a("p",[a("code",[s._v("KCallable.call")]),s._v(" 은 인자 리스트를 받아서 함수나 생성자를 호출해준다.\n하지만 디폴트 파라미터 값을 지원하지 않는다는 한계가 있다.\n디폴트 파라미터를 사용하기 위해서는 "),a("code",[s._v("KCallable.callBy")]),s._v("를 사용할 수 있다.")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" KCallable"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("out")]),s._v(" R"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("callBy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("args"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Map"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("KParameter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" R\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("callBy")]),s._v(" 메소드는 파라미터와 파라미터에 해당하는 값을 연결해주는 맵을 인자로 받는다.\n인자로 받은 맵에서 파라미터를 찾을수 없을 때 디폴트 값이 정의되어 있다면 디폴트 값을 사용한다.\n여기서는 "),a("code",[s._v("args")]),s._v(" 맵에 들어있는 각 값의 타입이 생성자의 파라미터 타입과 일치해야 한다. 그렇지 않으면 "),a("code",[s._v("Exception")]),s._v("이 발생한다.\n따라서 파라미터 타입이 어떤것인지를 확인하기 위해 "),a("code",[s._v("KParameter.type")]),s._v(" 프로퍼티를 활용해야 한다.")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("serializerForType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("type"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ValueSerializer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("out")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("when")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Byte"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" ByteSerializer\n    Int"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" IntSerializer\n    Boolean"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" BooleanSerializer\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("타입별 "),a("code",[s._v("ValueSerializer")]),s._v(" 구현은 필요한 타입 검사나 변환을 수행한다")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),s._v(" BooleanSerializer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ValueSerializer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Boolean"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fromJsonValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("jsonValue"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Boolean "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("jsonValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" Boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("JKidException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Boolean expected"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" jsonValue\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toJsonValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("code",[s._v("ClassInfoCache")]),s._v("는 리플렉션 연산의 비용을 줄이기 위한 클래스이다.\n직렬화와 역직렬화에 사용되는 애노테이션들은 파라미터가 아니라 프로퍼티에 적용된다.\n하지만 객체를 역직렬화할 때는 프로퍼티가 아니라 생성자 파라미터를 다뤄야 한다.")]),s._v(" "),a("p",[s._v("애노테이션을 꺼내려면 파라미터에 해당하는 프로퍼티를 찾아야 하는데 JSON에서 모든 키/값 쌍을 읽을 때마다 검색을 수행하면 느려진다.\n따라서 클래스별로 한 번만 검색을 수행하고 검색결과를 캐시에 넣는 기능을 수행한다.")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" ClassInfoCache "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" cacheData "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mutableMapOf"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("KClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ClassInfo"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token annotation builtin"}},[s._v("@Suppress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"UNCHECKED_CAST"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("operator")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cls"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" KClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ClassInfo"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n    cacheData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getOrPut")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ClassInfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" ClassInfo"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("맵에 값을 저장할 때는 타입정보가 사라지지만,\n맵에서 받은 값의 타입인 "),a("code",[s._v("ClassInfo<T>")]),s._v(" 타입인자가 항상 올바른 값이 되게 "),a("code",[s._v("get")]),s._v(" 메소드 값이 구현이 보장한다.")]),s._v(" "),a("p",[a("code",[s._v("ClassInfo")]),s._v(" 클래스는 대상 클래스의 새 인스턴스를 만들고 필요한 정보를 캐시해 둔다.")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" ClassInfo"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cls"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" KClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("constructor")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("primaryConstructor"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!!")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" jsonNameToParam "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hashMapOf"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" KParameter"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" paramToSerializer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hashMapOf"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("KParameter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ValueSerializer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("out")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" jsonNameToDeserializeClass "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hashMapOf"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Class"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("out")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("init")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("parameters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("forEach")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cacheDataForParameter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" It"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getConstructorParameter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("propertyName"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" KParameter "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n    jsonNameToParam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("propertyName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!!")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deserializeConstructorArgument")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("param"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" KParameter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" serializer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" paramToSerializer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("param"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("serializer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" serializer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fromJsonValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("validateArgumentType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("param"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" value\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Map"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("KParameter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" T "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ensureAllParametersPresent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("callBy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[a("code",[s._v("jsonNameToParam")]),s._v("은 JSON 파일의 각 키에 해당하는 파라미터를 저장하고, "),a("code",[s._v("paramToSerializer")]),s._v("는 각 파라미터에 대한 직렬화기를 저장한다.\n"),a("code",[s._v("jsonNameToDeserializeClass")]),s._v("는 "),a("code",[s._v("@DeserializeInterface")]),s._v(" 애노테이션 인자로 지정한 클래스를 저장한다.")])])}),[],!1,null,null,null);t.default=e.exports}}]);